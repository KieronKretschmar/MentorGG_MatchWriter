// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(MatchContext))]
    [Migration("20191114160910_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.BombDefused", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("BombTimeLeft")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique();

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("BombDefused");
                });

            modelBuilder.Entity("Entities.BombExplosion", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique();

                    b.ToTable("BombExplosion");
                });

            modelBuilder.Entity("Entities.BombPlant", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("PlantZone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<byte>("Site")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_BombPlant_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_BombPlant_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique()
                        .HasName("IX_FK_BombPlant_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_BombPlant_PlayerRoundStats");

                    b.ToTable("BombPlant");
                });

            modelBuilder.Entity("Entities.BotTakeOver", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("BotTakeOverId")
                        .HasColumnType("bigint");

                    b.Property<long>("BotId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "BotTakeOverId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_BotTakeOver_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_BotTakeOver_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_BotTakeOver_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_BotTakeOver_PlayerRoundStats");

                    b.ToTable("BotTakeOver");
                });

            modelBuilder.Entity("Entities.ConnectDisconnect", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConnectDisconnectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Connect")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ConnectDisconnectId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_ConnectDisconnect_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_ConnectDisconnect_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_ConnectDisconnect_RoundStats");

                    b.ToTable("ConnectDisconnect");
                });

            modelBuilder.Entity("Entities.Damage", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageId")
                        .HasColumnType("bigint");

                    b.Property<int>("AmountArmor")
                        .HasColumnType("int");

                    b.Property<int>("AmountHealth")
                        .HasColumnType("int");

                    b.Property<int>("AmountHealthPotential")
                        .HasColumnType("int");

                    b.Property<long?>("DecoyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Fatal")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("FireNadeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HegrenadeId")
                        .HasColumnName("HEGrenadeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("HitGroup")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<int?>("PlayerZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamAttack")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<int?>("VictimZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.Property<long?>("WeaponFiredId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "DamageId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Damage_MatchStats");

                    b.HasIndex("MatchId", "DecoyId")
                        .HasName("IX_FK_Damage_Decoy");

                    b.HasIndex("MatchId", "FireNadeId")
                        .HasName("IX_FK_Damage_FireNade");

                    b.HasIndex("MatchId", "HegrenadeId")
                        .HasName("IX_FK_Damage_HE");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Damage_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Damage_RoundStats");

                    b.HasIndex("MatchId", "VictimId");

                    b.HasIndex("MatchId", "WeaponFiredId")
                        .HasName("IX_FK_Damage_WeaponFired");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Damage_PlayerRoundStats");

                    b.HasIndex("MatchId", "Round", "VictimId");

                    b.ToTable("Damage");
                });

            modelBuilder.Entity("Entities.Decoy", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Decoy_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Decoy_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Decoy_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Decoy_PlayerRoundStats");

                    b.ToTable("Decoy");
                });

            modelBuilder.Entity("Entities.FireNade", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMolotov")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("NadeType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_FireNade_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_FireNade_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_FireNade_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_FireNade_PlayerRoundStats");

                    b.ToTable("FireNade");
                });

            modelBuilder.Entity("Entities.Flash", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Flash_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Flash_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Flash_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Flash_PlayerRoundStats");

                    b.ToTable("Flash");
                });

            modelBuilder.Entity("Entities.Flashed", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<int>("AngleToCrosshair")
                        .HasColumnType("int");

                    b.Property<long?>("AssistedKillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamAttack")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TimeFlashed")
                        .HasColumnType("int");

                    b.Property<int?>("TimeUntilAssistedKill")
                        .HasColumnType("int");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<double>("VictimViewX")
                        .HasColumnType("double");

                    b.Property<double>("VictimViewY")
                        .HasColumnType("double");

                    b.HasKey("MatchId", "GrenadeId", "VictimId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Flashed_MatchStats");

                    b.HasIndex("MatchId", "AssistedKillId")
                        .HasName("IX_FK_Flashed_Kills");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Flashed_RoundStats");

                    b.HasIndex("MatchId", "VictimId")
                        .HasName("IX_FK_Flashed_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round", "VictimId")
                        .HasName("IX_FK_Flashed_PlayerRoundStats");

                    b.ToTable("Flashed");
                });

            modelBuilder.Entity("Entities.He", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_HE_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_HE_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_HE_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_HE_PlayerRoundStats");

                    b.ToTable("HE");
                });

            modelBuilder.Entity("Entities.HostageDrop", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_HostageDrop_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_HostageDrop_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_HostageDrop_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_HostageDrop_PlayerRoundStats");

                    b.ToTable("HostageDrop");
                });

            modelBuilder.Entity("Entities.HostagePickUp", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_HostagePickUp_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_HostagePickUp_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_HostagePickUp_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_HostagePickUp_PlayerRoundStats");

                    b.ToTable("HostagePickUp");
                });

            modelBuilder.Entity("Entities.HostageRescue", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_HostageRescue_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_HostageRescue_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_HostageRescue_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_HostageRescue_PlayerRoundStats");

                    b.ToTable("HostageRescue");
                });

            modelBuilder.Entity("Entities.ItemDropped", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemDroppedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ByDeath")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("Gift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ItemDroppedId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_ItemDropped_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_ItemDropped_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_ItemDropped_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_ItemDropped_PlayerRoundStats");

                    b.ToTable("ItemDropped");
                });

            modelBuilder.Entity("Entities.ItemPickedUp", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemPickedUpId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Buy")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("Gift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ItemDroppedId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ItemPickedUpId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_ItemPickedUp_MatchStats");

                    b.HasIndex("MatchId", "ItemDroppedId")
                        .HasName("IX_FK_ItemPickedUp_ItemDropped");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_ItemPickedUp_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_ItemPickedUp_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_ItemPickedUp_PlayerRoundStats");

                    b.ToTable("ItemPickedUp");
                });

            modelBuilder.Entity("Entities.ItemSaved", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemSavedId")
                        .HasColumnType("bigint");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "ItemSavedId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_ItemSaved_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_ItemSaved_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_ItemSaved_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_ItemSaved_PlayerRoundStats");

                    b.ToTable("ItemSaved");
                });

            modelBuilder.Entity("Entities.Kills", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("KillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AssistedFlash")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("AssisterId")
                        .HasColumnType("bigint");

                    b.Property<double?>("AssisterPosX")
                        .HasColumnType("double");

                    b.Property<double?>("AssisterPosY")
                        .HasColumnType("double");

                    b.Property<double?>("AssisterPosZ")
                        .HasColumnType("double");

                    b.Property<long?>("DamageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("KillType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<short>("PlayerPrimary")
                        .HasColumnType("smallint");

                    b.Property<short>("PlayerSecondary")
                        .HasColumnType("smallint");

                    b.Property<int?>("PlayerZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamKill")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<short>("VictimPrimary")
                        .HasColumnType("smallint");

                    b.Property<short>("VictimSecondary")
                        .HasColumnType("smallint");

                    b.Property<int?>("VictimZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "KillId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Kills_MatchStats");

                    b.HasIndex("MatchId", "DamageId")
                        .HasName("IX_FK_Kills_Damage");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Kills_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Kills_RoundStats");

                    b.HasIndex("MatchId", "VictimId");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Kills_PlayerRoundStats");

                    b.HasIndex("MatchId", "Round", "VictimId");

                    b.ToTable("Kills");
                });

            modelBuilder.Entity("Entities.MatchStats", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double?>("Avgrank")
                        .HasColumnName("AVGRank")
                        .HasColumnType("double");

                    b.Property<int?>("AvgroundTime")
                        .HasColumnName("AVGRoundTime")
                        .HasColumnType("int");

                    b.Property<short>("BombDefuses1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombDefuses2")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplodes1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplodes2")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants2")
                        .HasColumnType("smallint");

                    b.Property<int>("BombTimer")
                        .HasColumnType("int");

                    b.Property<long>("DemoId")
                        .HasColumnType("bigint");

                    b.Property<short>("DemoTickRate")
                        .HasColumnType("smallint");

                    b.Property<string>("Event")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<byte>("GameType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Map")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MoneyEarned1")
                        .HasColumnType("int");

                    b.Property<int>("MoneyEarned2")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent1")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent2")
                        .HasColumnType("int");

                    b.Property<short>("NumRoundsCt1")
                        .HasColumnName("NumRoundsCT1")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsCt2")
                        .HasColumnName("NumRoundsCT2")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsT1")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsT2")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore1")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore2")
                        .HasColumnType("smallint");

                    b.Property<int>("RoundTimer")
                        .HasColumnType("int");

                    b.Property<short>("Score1")
                        .HasColumnType("smallint");

                    b.Property<short>("Score2")
                        .HasColumnType("smallint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<short>("SourceTickRate")
                        .HasColumnType("smallint");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.Property<byte>("WinnerTeam")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId");

                    b.HasIndex("DemoId")
                        .HasName("IX_FK_MatchStats_DemoStats");

                    b.ToTable("MatchStats");
                });

            modelBuilder.Entity("Entities.OverTimeStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("NumRounds")
                        .HasColumnType("smallint");

                    b.Property<byte>("StartCt")
                        .HasColumnName("StartCT")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.Property<byte>("StartT")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_OverTimeStats_MatchStats");

                    b.ToTable("OverTimeStats");
                });

            modelBuilder.Entity("Entities.PlayerMatchStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<short>("AssistCount")
                        .HasColumnType("smallint");

                    b.Property<double>("AvgtimeAlive")
                        .HasColumnName("AVGTimeAlive")
                        .HasColumnType("double");

                    b.Property<short>("BombDefuses")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplosions")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants")
                        .HasColumnType("smallint");

                    b.Property<short>("BombVictim")
                        .HasColumnType("smallint");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("DamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("DeathCount")
                        .HasColumnType("smallint");

                    b.Property<short>("DecoysUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy2K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy3K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy4K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy5K")
                        .HasColumnType("smallint");

                    b.Property<int>("EntryKillVictim")
                        .HasColumnType("int");

                    b.Property<int>("EntryKills")
                        .HasColumnType("int");

                    b.Property<int>("FireNadesDamage")
                        .HasColumnType("int");

                    b.Property<int>("FireNadesDamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("FireNadesUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("FirstBloodVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("FirstBloods")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashesSucceeded")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashesUsed")
                        .HasColumnType("smallint");

                    b.Property<int>("HesDamage")
                        .HasColumnName("HEsDamage")
                        .HasColumnType("int");

                    b.Property<int>("HesDamageVictim")
                        .HasColumnName("HEsDamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("HesUsed")
                        .HasColumnName("HEsUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Hits")
                        .HasColumnType("smallint");

                    b.Property<double>("Hltvrating1")
                        .HasColumnName("HLTVRating1")
                        .HasColumnType("double");

                    b.Property<double>("Hltvrating2")
                        .HasColumnName("HLTVRating2")
                        .HasColumnType("double");

                    b.Property<short>("Hs")
                        .HasColumnName("HS")
                        .HasColumnType("smallint");

                    b.Property<short>("Hsdeaths")
                        .HasColumnName("HSDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("Hskills")
                        .HasColumnName("HSKills")
                        .HasColumnType("smallint");

                    b.Property<short>("Hsvictim")
                        .HasColumnName("HSVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("KillCount")
                        .HasColumnType("smallint");

                    b.Property<int>("MoneyEarned")
                        .HasColumnType("int");

                    b.Property<int>("MoneyLost")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<short>("Mvps")
                        .HasColumnName("MVPs")
                        .HasColumnType("smallint");

                    b.Property<byte>("RankAfterMatch")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("RankBeforeMatch")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("RealAssists")
                        .HasColumnType("smallint");

                    b.Property<short>("RealDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("RealKills")
                        .HasColumnType("smallint");

                    b.Property<short>("RealMvps")
                        .HasColumnName("RealMVPs")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore")
                        .HasColumnType("smallint");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<short>("SelfFlashed")
                        .HasColumnType("smallint");

                    b.Property<short>("Shots")
                        .HasColumnType("smallint");

                    b.Property<short>("SmokesUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Suicides")
                        .HasColumnType("smallint");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("TeamDamage")
                        .HasColumnType("int");

                    b.Property<short>("TeamFlashVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("TeamFlashed")
                        .HasColumnType("smallint");

                    b.Property<int>("TeamKills")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "SteamId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_PlayerMatchStats_MatchStats");

                    b.HasIndex("SteamId")
                        .HasName("IX_FK_PlayerMatchStats_PlayerStats");

                    b.ToTable("PlayerMatchStats");
                });

            modelBuilder.Entity("Entities.PlayerPosition", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_PlayerPosition_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_PlayerPosition_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_PlayerPosition_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_PlayerPosition_PlayerRoundStats");

                    b.ToTable("PlayerPosition");
                });

            modelBuilder.Entity("Entities.PlayerRoundStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("ArmorType")
                        .HasColumnType("smallint");

                    b.Property<int>("GiftedValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MoneyEarned")
                        .HasColumnType("int");

                    b.Property<int>("MoneyInitial")
                        .HasColumnType("int");

                    b.Property<int>("MoneyLost")
                        .HasColumnType("int");

                    b.Property<int>("MoneySaved")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.Property<int>("PlayedEquipmentValue")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedGiftValue")
                        .HasColumnType("int");

                    b.Property<short>("RoundStartAssists")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartDamage")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartKills")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartMvps")
                        .HasColumnName("RoundStartMVPs")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartScore")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "Round", "PlayerId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_PlayerRoundStats_MatchStats");

                    b.HasIndex("PlayerId")
                        .HasName("IX_FK_PlayerRoundStats_PlayerStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_PlayerRoundStats_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_PlayerRoundStats_RoundStats");

                    b.ToTable("PlayerRoundStats");
                });

            modelBuilder.Entity("Entities.Refrag", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("KillId")
                        .HasColumnType("bigint");

                    b.Property<long>("RefraggedKillId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "KillId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK__Refrag_MatchStats");

                    b.HasIndex("MatchId", "KillId")
                        .HasName("IX_FK__Refrag_Kill");

                    b.HasIndex("MatchId", "RefraggedKillId")
                        .HasName("IX_FK__Refrag_Kill_Refragged");

                    b.ToTable("_Refrag");
                });

            modelBuilder.Entity("Entities.RoundItem", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundItemId")
                        .HasColumnType("bigint");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "RoundItemId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_RoundItem_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_RoundItem_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_RoundItem_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_RoundItem_PlayerRoundStats");

                    b.ToTable("RoundItem");
                });

            modelBuilder.Entity("Entities.RoundStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("BombPlanted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CtBuyStrat")
                        .HasColumnName("_CtBuyStrat")
                        .HasColumnType("int");

                    b.Property<int>("CtPlayedValue")
                        .HasColumnType("int");

                    b.Property<int>("CtStrategyId")
                        .HasColumnType("int");

                    b.Property<int>("EndTick")
                        .HasColumnType("int");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<bool>("OriginalSide")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RealEndTick")
                        .HasColumnType("int");

                    b.Property<int>("RealEndTime")
                        .HasColumnType("int");

                    b.Property<int>("RoundTime")
                        .HasColumnType("int");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<int>("TbuyStrat")
                        .HasColumnName("_TBuyStrat")
                        .HasColumnType("int");

                    b.Property<int>("TerrorStrategyId")
                        .HasColumnType("int");

                    b.Property<int>("TplayedValue")
                        .HasColumnName("TPlayedValue")
                        .HasColumnType("int");

                    b.Property<byte?>("WinType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("WinnerTeam")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_RoundStats_MatchStats");

                    b.ToTable("RoundStats");
                });

            modelBuilder.Entity("Entities.Smoke", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("Category")
                        .HasColumnName("_Category")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<byte>("Result")
                        .HasColumnName("_Result")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Target")
                        .HasColumnName("_Target")
                        .HasColumnType("int");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Smoke_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Smoke_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Smoke_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Smoke_PlayerRoundStats");

                    b.ToTable("Smoke");
                });

            modelBuilder.Entity("Entities.WeaponFired", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeaponFiredId")
                        .HasColumnType("bigint");

                    b.Property<double>("InAccuracyFromFiring")
                        .HasColumnType("double");

                    b.Property<double>("InAccuracyFromMoving")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<short>("PlayerState")
                        .HasColumnType("smallint");

                    b.Property<double>("PlayerVeloX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "WeaponFiredId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_WeaponFired_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_WeaponFired_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_WeaponFired_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_WeaponFired_PlayerRoundStats");

                    b.ToTable("WeaponFired");
                });

            modelBuilder.Entity("Entities.WeaponReload", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeaponReloadId")
                        .HasColumnType("bigint");

                    b.Property<short>("AmmoAfter")
                        .HasColumnType("smallint");

                    b.Property<short>("AmmoBefore")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("ReserveAmmo")
                        .HasColumnType("smallint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "WeaponReloadId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_WeaponReload_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_WeaponReload_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_WeaponReload_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_WeaponReload_PlayerRoundStats");

                    b.ToTable("WeaponReload");
                });

            modelBuilder.Entity("Entities.BombDefused", b =>
                {
                    b.HasOne("Entities.MatchStats", "MatchStats")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithOne("BombDefused")
                        .HasForeignKey("Entities.BombDefused", "MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.BombExplosion", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("BombExplosion")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithOne("BombExplosion")
                        .HasForeignKey("Entities.BombExplosion", "MatchId", "Round")
                        .HasConstraintName("FK_BombExplosion_RoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.BombPlant", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_BombPlant_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_BombPlant_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithOne("BombPlant")
                        .HasForeignKey("Entities.BombPlant", "MatchId", "Round")
                        .HasConstraintName("FK_BombPlant_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_BombPlant_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.BotTakeOver", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_BotTakeOver_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_BotTakeOver_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_BotTakeOver_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_BotTakeOver_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ConnectDisconnect", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_ConnectDisconnect_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_ConnectDisconnect_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_ConnectDisconnect_RoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Damage", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Damage_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Decoy", "Decoy")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "DecoyId")
                        .HasConstraintName("FK_Damage_Decoy");

                    b.HasOne("Entities.FireNade", "FireNade")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "FireNadeId")
                        .HasConstraintName("FK_Damage_FireNade");

                    b.HasOne("Entities.He", "He")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "HegrenadeId")
                        .HasConstraintName("FK_Damage_HE");

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("DamagePlayerMatchStats")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Damage_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Damage_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStatsNavigation")
                        .WithMany("DamagePlayerMatchStatsNavigation")
                        .HasForeignKey("MatchId", "VictimId")
                        .HasConstraintName("FK_Damage_PlayerMatchStats_Victim")
                        .IsRequired();

                    b.HasOne("Entities.WeaponFired", "WeaponFired")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "WeaponFiredId")
                        .HasConstraintName("FK_Damage_WeaponFired");

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("DamagePlayerRoundStats")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Damage_PlayerRoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStatsNavigation")
                        .WithMany("DamagePlayerRoundStatsNavigation")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .HasConstraintName("FK_Damage_PlayerRoundStats_Victim")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Decoy", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Decoy_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Decoy_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Decoy_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Decoy_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.FireNade", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_FireNade_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_FireNade_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_FireNade_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_FireNade_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Flash", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Flash_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Flash_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Flash_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Flash_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Flashed", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Flashed_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Kills", "Kills")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "AssistedKillId")
                        .HasConstraintName("FK_Flashed_Kills");

                    b.HasOne("Entities.Flash", "Flash")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "GrenadeId")
                        .HasConstraintName("FK_Flashed_Flash")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Flashed_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "VictimId")
                        .HasConstraintName("FK_Flashed_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .HasConstraintName("FK_Flashed_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.He", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("He")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_HE_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_HE_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HE_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_HE_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.HostageDrop", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_HostageDrop_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_HostageDrop_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HostageDrop_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_HostageDrop_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.HostagePickUp", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_HostagePickUp_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_HostagePickUp_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HostagePickUp_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_HostagePickUp_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.HostageRescue", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_HostageRescue_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_HostageRescue_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HostageRescue_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_HostageRescue_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ItemDropped", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_ItemDropped_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_ItemDropped_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_ItemDropped_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_ItemDropped_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ItemPickedUp", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_ItemPickedUp_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ItemDropped", "ItemDropped")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "ItemDroppedId")
                        .HasConstraintName("FK_ItemPickedUp_ItemDropped");

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_ItemPickedUp_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_ItemPickedUp_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_ItemPickedUp_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ItemSaved", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_ItemSaved_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_ItemSaved_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_ItemSaved_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_ItemSaved_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Kills", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Kills_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Damage", "Damage")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "DamageId")
                        .HasConstraintName("FK_Kills_Damage");

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Kills_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Kills_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "VictimMatchStats")
                        .WithMany("Deaths")
                        .HasForeignKey("MatchId", "VictimId")
                        .HasConstraintName("FK_Kills_PlayerMatchStats_Victim")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("KillsPlayerRoundStats")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Kills_PlayerRoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStatsNavigation")
                        .WithMany("KillsPlayerRoundStatsNavigation")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .HasConstraintName("FK_Kills_PlayerRoundStats_Victim")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.OverTimeStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithOne("OverTimeStats")
                        .HasForeignKey("Entities.OverTimeStats", "MatchId")
                        .HasConstraintName("FK_OverTimeStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.PlayerMatchStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_PlayerMatchStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.PlayerPosition", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_PlayerPosition_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_PlayerPosition_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_PlayerPosition_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_PlayerPosition_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.PlayerRoundStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_PlayerRoundStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_PlayerRoundStats_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_PlayerRoundStats_RoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Refrag", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Refrag")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK__Refrag_MatchStats")
                        .IsRequired();

                    b.HasOne("Entities.Kills", "Kills")
                        .WithOne("RefragKills")
                        .HasForeignKey("Entities.Refrag", "MatchId", "KillId")
                        .HasConstraintName("FK__Refrag_Kill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Kills", "KillsNavigation")
                        .WithMany("RefragKillsNavigation")
                        .HasForeignKey("MatchId", "RefraggedKillId")
                        .HasConstraintName("FK__Refrag_Kill_Refragged")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.RoundItem", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_RoundItem_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_RoundItem_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_RoundItem_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_RoundItem_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.RoundStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("RoundStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_RoundStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Smoke", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Smoke_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Smoke_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Smoke_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Smoke_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.WeaponFired", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_WeaponFired_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_WeaponFired_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_WeaponFired_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_WeaponFired_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.WeaponReload", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_WeaponReload_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_WeaponReload_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_WeaponReload_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_WeaponReload_PlayerRoundStats")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
