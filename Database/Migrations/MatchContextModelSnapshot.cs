// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(MatchContext))]
    partial class MatchContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.BombDefused", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("BombTimeLeft")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_BombDefused_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_BombDefused_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique()
                        .HasName("IX_FK_BombDefused_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_BombDefused_PlayerRoundStats");

                    b.ToTable("BombDefused");
                });

            modelBuilder.Entity("Entities.BombExplosion", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_BombExplosion_MatchStats");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique()
                        .HasName("IX_FK_BombExplosion_RoundStats");

                    b.ToTable("BombExplosion");
                });

            modelBuilder.Entity("Entities.BombPlant", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("PlantZone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<byte>("Site")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_BombPlant_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_BombPlant_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique()
                        .HasName("IX_FK_BombPlant_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_BombPlant_PlayerRoundStats");

                    b.ToTable("BombPlant");
                });

            modelBuilder.Entity("Entities.BombPolygonPoint", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Xingame")
                        .HasColumnName("XIngame")
                        .HasColumnType("double");

                    b.Property<int>("Xpixel")
                        .HasColumnName("XPixel")
                        .HasColumnType("int");

                    b.Property<double>("Yingame")
                        .HasColumnName("YIngame")
                        .HasColumnType("double");

                    b.Property<int>("Ypixel")
                        .HasColumnName("YPixel")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "PointId");

                    b.HasIndex("ZoneId")
                        .HasName("IX_FK__BombPolygonPoint__BombZone");

                    b.ToTable("_BombPolygonPoint");
                });

            modelBuilder.Entity("Entities.BombZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<double>("CenterXingame")
                        .HasColumnName("CenterXIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterXpixel")
                        .HasColumnName("CenterXPixel")
                        .HasColumnType("int");

                    b.Property<double>("CenterYingame")
                        .HasColumnName("CenterYIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterYpixel")
                        .HasColumnName("CenterYPixel")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ParentZoneId")
                        .HasColumnType("int");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<double?>("Zmax")
                        .HasColumnName("ZMax")
                        .HasColumnType("double");

                    b.Property<double?>("Zmin")
                        .HasColumnName("ZMin")
                        .HasColumnType("double");

                    b.Property<int>("ZoneDepth")
                        .HasColumnType("int");

                    b.HasKey("ZoneId");

                    b.ToTable("_BombZone");
                });

            modelBuilder.Entity("Entities.BotTakeOver", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("BotTakeOverId")
                        .HasColumnType("bigint");

                    b.Property<long>("BotId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "BotTakeOverId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_BotTakeOver_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_BotTakeOver_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_BotTakeOver_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_BotTakeOver_PlayerRoundStats");

                    b.ToTable("BotTakeOver");
                });

            modelBuilder.Entity("Entities.ConnectDisconnect", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConnectDisconnectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Connect")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ConnectDisconnectId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_ConnectDisconnect_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_ConnectDisconnect_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_ConnectDisconnect_RoundStats");

                    b.ToTable("ConnectDisconnect");
                });

            modelBuilder.Entity("Entities.Damage", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageId")
                        .HasColumnType("bigint");

                    b.Property<int>("AmountArmor")
                        .HasColumnType("int");

                    b.Property<int>("AmountHealth")
                        .HasColumnType("int");

                    b.Property<int>("AmountHealthPotential")
                        .HasColumnType("int");

                    b.Property<long?>("DecoyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Fatal")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("FireNadeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HegrenadeId")
                        .HasColumnName("HEGrenadeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("HitGroup")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<int?>("PlayerZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamAttack")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<int?>("VictimZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.Property<long?>("WeaponFiredId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "DamageId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Damage_MatchStats");

                    b.HasIndex("MatchId", "DecoyId")
                        .HasName("IX_FK_Damage_Decoy");

                    b.HasIndex("MatchId", "FireNadeId")
                        .HasName("IX_FK_Damage_FireNade");

                    b.HasIndex("MatchId", "HegrenadeId")
                        .HasName("IX_FK_Damage_HE");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Damage_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Damage_RoundStats");

                    b.HasIndex("MatchId", "VictimId");

                    b.HasIndex("MatchId", "WeaponFiredId")
                        .HasName("IX_FK_Damage_WeaponFired");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Damage_PlayerRoundStats");

                    b.HasIndex("MatchId", "Round", "VictimId");

                    b.ToTable("Damage");
                });

            modelBuilder.Entity("Entities.Decoy", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Decoy_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Decoy_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Decoy_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Decoy_PlayerRoundStats");

                    b.ToTable("Decoy");
                });

            modelBuilder.Entity("Entities.DemoStats", b =>
                {
                    b.Property<long>("DemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<short>("Attempts")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DemoAnalyzerVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('1900-01-01 00:00:00')");

                    b.Property<string>("DemoFileHashMd5")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DemoFileHashMD5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("DemoFileName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("DemoFilePath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("DemoUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("FaceItMatchId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime>("MatchDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PyAnalyzerVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('1900-01-01 00:00:00')");

                    b.Property<string>("Source")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<short>("UploadType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((-1))");

                    b.Property<long>("UploadedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("((-1))");

                    b.HasKey("DemoId");

                    b.ToTable("DemoStats");
                });

            modelBuilder.Entity("Entities.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<double>("Bullets")
                        .HasColumnType("double");

                    b.Property<int>("ClipSize")
                        .HasColumnType("int");

                    b.Property<double>("CycleTime")
                        .HasColumnType("double");

                    b.Property<double>("CycleTimeAlt")
                        .HasColumnType("double");

                    b.Property<double>("CycletimeBurst")
                        .HasColumnType("double");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<double>("FlinchVelocityModifierLarge")
                        .HasColumnType("double");

                    b.Property<double>("FlinchVelocityModifierSmall")
                        .HasColumnType("double");

                    b.Property<double>("FullAuto")
                        .HasColumnType("double");

                    b.Property<string>("InGameName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<double>("InaccuracyCrouch")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyCrouchAlt")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyFire")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyFireAlt")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyJump")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyJumpAlt")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyJumpIntial")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyLadder")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyLadderAlt")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyLand")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyLandAlt")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyMove")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyMoveAlt")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyStand")
                        .HasColumnType("double");

                    b.Property<double>("InaccuracyStandAlt")
                        .HasColumnType("double");

                    b.Property<int>("KillAward")
                        .HasColumnType("int");

                    b.Property<int>("MaxPlayerSpeed")
                        .HasColumnType("int");

                    b.Property<double>("MaxPlayerSpeedAlt")
                        .HasColumnType("double");

                    b.Property<double>("Penetration")
                        .HasColumnType("double");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<double>("RangeModifier")
                        .HasColumnType("double");

                    b.Property<double>("RecoilAngleVariance")
                        .HasColumnType("double");

                    b.Property<double>("RecoilAngleVarianceAlt")
                        .HasColumnType("double");

                    b.Property<double>("RecoilMagnitude")
                        .HasColumnType("double");

                    b.Property<double>("RecoilMagnitudeAlt")
                        .HasColumnType("double");

                    b.Property<double>("RecoilMagnitudeVariance")
                        .HasColumnType("double");

                    b.Property<double>("RecoilMagnitudeVarianceAlt")
                        .HasColumnType("double");

                    b.Property<double>("RecoveryTimeCrouch")
                        .HasColumnType("double");

                    b.Property<double>("RecoveryTimeCrouchFinal")
                        .HasColumnType("double");

                    b.Property<double>("RecoveryTimeStand")
                        .HasColumnType("double");

                    b.Property<double>("RecoveryTimeStandFinal")
                        .HasColumnType("double");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<double>("Spread")
                        .HasColumnType("double");

                    b.Property<double>("SpreadAlt")
                        .HasColumnType("double");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("TimeInbetweenBurstShots")
                        .HasColumnType("double");

                    b.Property<double>("TracerFrequency")
                        .HasColumnType("double");

                    b.Property<double>("TracerFrequencyAlt")
                        .HasColumnType("double");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("WeaponClass")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<double>("WeaporArmorRatio")
                        .HasColumnType("double");

                    b.Property<double>("ZoomFov")
                        .HasColumnType("double");

                    b.Property<double>("ZoomFovAlt")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Entities.FireNade", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMolotov")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("NadeType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_FireNade_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_FireNade_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_FireNade_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_FireNade_PlayerRoundStats");

                    b.ToTable("FireNade");
                });

            modelBuilder.Entity("Entities.FireNadePolygonPoint", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Xingame")
                        .HasColumnName("XIngame")
                        .HasColumnType("double");

                    b.Property<int>("Xpixel")
                        .HasColumnName("XPixel")
                        .HasColumnType("int");

                    b.Property<double>("Yingame")
                        .HasColumnName("YIngame")
                        .HasColumnType("double");

                    b.Property<int>("Ypixel")
                        .HasColumnName("YPixel")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "PointId");

                    b.HasIndex("ZoneId")
                        .HasName("IX_FK__FireNadePolygonPoint__FireNadeZone");

                    b.ToTable("_FireNadePolygonPoint");
                });

            modelBuilder.Entity("Entities.FireNadeZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<double>("CenterXingame")
                        .HasColumnName("CenterXIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterXpixel")
                        .HasColumnName("CenterXPixel")
                        .HasColumnType("int");

                    b.Property<double>("CenterYingame")
                        .HasColumnName("CenterYIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterYpixel")
                        .HasColumnName("CenterYPixel")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ParentZoneId")
                        .HasColumnType("int");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<double?>("Zmax")
                        .HasColumnName("ZMax")
                        .HasColumnType("double");

                    b.Property<double?>("Zmin")
                        .HasColumnName("ZMin")
                        .HasColumnType("double");

                    b.Property<int>("ZoneDepth")
                        .HasColumnType("int");

                    b.HasKey("ZoneId");

                    b.ToTable("_FireNadeZone");
                });

            modelBuilder.Entity("Entities.Flash", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Flash_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Flash_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Flash_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Flash_PlayerRoundStats");

                    b.ToTable("Flash");
                });

            modelBuilder.Entity("Entities.FlashPolygonPoint", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Xingame")
                        .HasColumnName("XIngame")
                        .HasColumnType("double");

                    b.Property<int>("Xpixel")
                        .HasColumnName("XPixel")
                        .HasColumnType("int");

                    b.Property<double>("Yingame")
                        .HasColumnName("YIngame")
                        .HasColumnType("double");

                    b.Property<int>("Ypixel")
                        .HasColumnName("YPixel")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "PointId");

                    b.HasIndex("ZoneId")
                        .HasName("IX_FK__FlashPolygonPoint__FlashZone");

                    b.ToTable("_FlashPolygonPoint");
                });

            modelBuilder.Entity("Entities.FlashZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<double>("CenterXingame")
                        .HasColumnName("CenterXIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterXpixel")
                        .HasColumnName("CenterXPixel")
                        .HasColumnType("int");

                    b.Property<double>("CenterYingame")
                        .HasColumnName("CenterYIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterYpixel")
                        .HasColumnName("CenterYPixel")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ParentZoneId")
                        .HasColumnType("int");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<double?>("Zmax")
                        .HasColumnName("ZMax")
                        .HasColumnType("double");

                    b.Property<double?>("Zmin")
                        .HasColumnName("ZMin")
                        .HasColumnType("double");

                    b.Property<int>("ZoneDepth")
                        .HasColumnType("int");

                    b.HasKey("ZoneId");

                    b.ToTable("_FlashZone");
                });

            modelBuilder.Entity("Entities.Flashed", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<int>("AngleToCrosshair")
                        .HasColumnType("int");

                    b.Property<long?>("AssistedKillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamAttack")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TimeFlashed")
                        .HasColumnType("int");

                    b.Property<int?>("TimeUntilAssistedKill")
                        .HasColumnType("int");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<double>("VictimViewX")
                        .HasColumnType("double");

                    b.Property<double>("VictimViewY")
                        .HasColumnType("double");

                    b.HasKey("MatchId", "GrenadeId", "VictimId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Flashed_MatchStats");

                    b.HasIndex("MatchId", "AssistedKillId")
                        .HasName("IX_FK_Flashed_Kills");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Flashed_RoundStats");

                    b.HasIndex("MatchId", "VictimId")
                        .HasName("IX_FK_Flashed_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round", "VictimId")
                        .HasName("IX_FK_Flashed_PlayerRoundStats");

                    b.ToTable("Flashed");
                });

            modelBuilder.Entity("Entities.Friends", b =>
                {
                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<long>("FriendSteamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("FaceIt")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FriendsSince")
                        .HasColumnType("datetime");

                    b.Property<bool>("Steam")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SteamId", "FriendSteamId");

                    b.HasIndex("FriendSteamId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Entities.He", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_HE_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_HE_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_HE_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_HE_PlayerRoundStats");

                    b.ToTable("HE");
                });

            modelBuilder.Entity("Entities.HepolygonPoint", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Xingame")
                        .HasColumnName("XIngame")
                        .HasColumnType("double");

                    b.Property<int>("Xpixel")
                        .HasColumnName("XPixel")
                        .HasColumnType("int");

                    b.Property<double>("Yingame")
                        .HasColumnName("YIngame")
                        .HasColumnType("double");

                    b.Property<int>("Ypixel")
                        .HasColumnName("YPixel")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "PointId");

                    b.HasIndex("ZoneId")
                        .HasName("IX_FK__HEPolygonPoint__HEZone");

                    b.ToTable("_HEPolygonPoint");
                });

            modelBuilder.Entity("Entities.Hezone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<double>("CenterXingame")
                        .HasColumnName("CenterXIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterXpixel")
                        .HasColumnName("CenterXPixel")
                        .HasColumnType("int");

                    b.Property<double>("CenterYingame")
                        .HasColumnName("CenterYIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterYpixel")
                        .HasColumnName("CenterYPixel")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ParentZoneId")
                        .HasColumnType("int");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<double?>("Zmax")
                        .HasColumnName("ZMax")
                        .HasColumnType("double");

                    b.Property<double?>("Zmin")
                        .HasColumnName("ZMin")
                        .HasColumnType("double");

                    b.Property<int>("ZoneDepth")
                        .HasColumnType("int");

                    b.HasKey("ZoneId");

                    b.ToTable("_HEZone");
                });

            modelBuilder.Entity("Entities.HostageDrop", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_HostageDrop_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_HostageDrop_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_HostageDrop_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_HostageDrop_PlayerRoundStats");

                    b.ToTable("HostageDrop");
                });

            modelBuilder.Entity("Entities.HostagePickUp", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_HostagePickUp_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_HostagePickUp_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_HostagePickUp_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_HostagePickUp_PlayerRoundStats");

                    b.ToTable("HostagePickUp");
                });

            modelBuilder.Entity("Entities.HostageRescue", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_HostageRescue_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_HostageRescue_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_HostageRescue_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_HostageRescue_PlayerRoundStats");

                    b.ToTable("HostageRescue");
                });

            modelBuilder.Entity("Entities.ItemDropped", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemDroppedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ByDeath")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("Gift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ItemDroppedId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_ItemDropped_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_ItemDropped_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_ItemDropped_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_ItemDropped_PlayerRoundStats");

                    b.ToTable("ItemDropped");
                });

            modelBuilder.Entity("Entities.ItemPickedUp", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemPickedUpId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Buy")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("Gift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ItemDroppedId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ItemPickedUpId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_ItemPickedUp_MatchStats");

                    b.HasIndex("MatchId", "ItemDroppedId")
                        .HasName("IX_FK_ItemPickedUp_ItemDropped");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_ItemPickedUp_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_ItemPickedUp_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_ItemPickedUp_PlayerRoundStats");

                    b.ToTable("ItemPickedUp");
                });

            modelBuilder.Entity("Entities.ItemSaved", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemSavedId")
                        .HasColumnType("bigint");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "ItemSavedId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_ItemSaved_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_ItemSaved_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_ItemSaved_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_ItemSaved_PlayerRoundStats");

                    b.ToTable("ItemSaved");
                });

            modelBuilder.Entity("Entities.Kills", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("KillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AssistedFlash")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("AssisterId")
                        .HasColumnType("bigint");

                    b.Property<double?>("AssisterPosX")
                        .HasColumnType("double");

                    b.Property<double?>("AssisterPosY")
                        .HasColumnType("double");

                    b.Property<double?>("AssisterPosZ")
                        .HasColumnType("double");

                    b.Property<long?>("DamageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("KillType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<short>("PlayerPrimary")
                        .HasColumnType("smallint");

                    b.Property<short>("PlayerSecondary")
                        .HasColumnType("smallint");

                    b.Property<int?>("PlayerZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamKill")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<short>("VictimPrimary")
                        .HasColumnType("smallint");

                    b.Property<short>("VictimSecondary")
                        .HasColumnType("smallint");

                    b.Property<int?>("VictimZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "KillId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Kills_MatchStats");

                    b.HasIndex("MatchId", "DamageId")
                        .HasName("IX_FK_Kills_Damage");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Kills_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Kills_RoundStats");

                    b.HasIndex("MatchId", "VictimId");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Kills_PlayerRoundStats");

                    b.HasIndex("MatchId", "Round", "VictimId");

                    b.ToTable("Kills");
                });

            modelBuilder.Entity("Entities.MapSettings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("ConversionOffsetX")
                        .HasColumnType("double");

                    b.Property<double>("ConversionOffsetY")
                        .HasColumnType("double");

                    b.Property<double>("ConversionScaleX")
                        .HasColumnType("double");

                    b.Property<double>("ConversionScaleY")
                        .HasColumnType("double");

                    b.Property<double>("CropXmax")
                        .HasColumnName("CropXMax")
                        .HasColumnType("double");

                    b.Property<double>("CropXmin")
                        .HasColumnName("CropXMin")
                        .HasColumnType("double");

                    b.Property<double>("CropYmax")
                        .HasColumnName("CropYMax")
                        .HasColumnType("double");

                    b.Property<double>("CropYmin")
                        .HasColumnName("CropYMin")
                        .HasColumnType("double");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("_MapSettings");
                });

            modelBuilder.Entity("Entities.MatchStats", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double?>("Avgrank")
                        .HasColumnName("AVGRank")
                        .HasColumnType("double");

                    b.Property<int?>("AvgroundTime")
                        .HasColumnName("AVGRoundTime")
                        .HasColumnType("int");

                    b.Property<short>("BombDefuses1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombDefuses2")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplodes1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplodes2")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants2")
                        .HasColumnType("smallint");

                    b.Property<int>("BombTimer")
                        .HasColumnType("int");

                    b.Property<long>("DemoId")
                        .HasColumnType("bigint");

                    b.Property<short>("DemoTickRate")
                        .HasColumnType("smallint");

                    b.Property<string>("Event")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<byte>("GameType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Map")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MoneyEarned1")
                        .HasColumnType("int");

                    b.Property<int>("MoneyEarned2")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent1")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent2")
                        .HasColumnType("int");

                    b.Property<short>("NumRoundsCt1")
                        .HasColumnName("NumRoundsCT1")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsCt2")
                        .HasColumnName("NumRoundsCT2")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsT1")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsT2")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore1")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore2")
                        .HasColumnType("smallint");

                    b.Property<int>("RoundTimer")
                        .HasColumnType("int");

                    b.Property<short>("Score1")
                        .HasColumnType("smallint");

                    b.Property<short>("Score2")
                        .HasColumnType("smallint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<short>("SourceTickRate")
                        .HasColumnType("smallint");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.Property<byte>("WinnerTeam")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId");

                    b.HasIndex("DemoId")
                        .HasName("IX_FK_MatchStats_DemoStats");

                    b.ToTable("MatchStats");
                });

            modelBuilder.Entity("Entities.OpposingZones", b =>
                {
                    b.Property<int>("TzoneId")
                        .HasColumnName("TZoneId")
                        .HasColumnType("int");

                    b.Property<int>("CtZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TzoneId", "CtZoneId");

                    b.ToTable("_OpposingZones");
                });

            modelBuilder.Entity("Entities.OverTimeStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("NumRounds")
                        .HasColumnType("smallint");

                    b.Property<byte>("StartCt")
                        .HasColumnName("StartCT")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.Property<byte>("StartT")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_OverTimeStats_MatchStats");

                    b.ToTable("OverTimeStats");
                });

            modelBuilder.Entity("Entities.PlayerMatchSmokeStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Category")
                        .HasColumnName("_Category")
                        .HasColumnType("int");

                    b.Property<byte>("Attempts")
                        .HasColumnName("_Attempts")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Gapfrees")
                        .HasColumnName("_Gapfrees")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Insides")
                        .HasColumnName("_Insides")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Misses")
                        .HasColumnName("_Misses")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId", "PlayerId", "Category");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK__PlayerMatchSmokeStats_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK__PlayerMatchSmokeStats_PlayerMatchStats");

                    b.ToTable("_PlayerMatchSmokeStats");
                });

            modelBuilder.Entity("Entities.PlayerMatchStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<short>("Assists")
                        .HasColumnType("smallint");

                    b.Property<double>("AvgtimeAlive")
                        .HasColumnName("AVGTimeAlive")
                        .HasColumnType("double");

                    b.Property<short>("BombDefuses")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplosions")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants")
                        .HasColumnType("smallint");

                    b.Property<short>("BombVictim")
                        .HasColumnType("smallint");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("DamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("Deaths")
                        .HasColumnType("smallint");

                    b.Property<short>("DecoysUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy2K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy3K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy4K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy5K")
                        .HasColumnType("smallint");

                    b.Property<int>("EntryKillVictim")
                        .HasColumnType("int");

                    b.Property<int>("EntryKills")
                        .HasColumnType("int");

                    b.Property<int>("FireNadesDamage")
                        .HasColumnType("int");

                    b.Property<int>("FireNadesDamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("FireNadesUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("FirstBloodVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("FirstBloods")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashesSucceeded")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashesUsed")
                        .HasColumnType("smallint");

                    b.Property<int>("HesDamage")
                        .HasColumnName("HEsDamage")
                        .HasColumnType("int");

                    b.Property<int>("HesDamageVictim")
                        .HasColumnName("HEsDamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("HesUsed")
                        .HasColumnName("HEsUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Hits")
                        .HasColumnType("smallint");

                    b.Property<double>("Hltvrating1")
                        .HasColumnName("HLTVRating1")
                        .HasColumnType("double");

                    b.Property<double>("Hltvrating2")
                        .HasColumnName("HLTVRating2")
                        .HasColumnType("double");

                    b.Property<short>("Hs")
                        .HasColumnName("HS")
                        .HasColumnType("smallint");

                    b.Property<short>("Hsdeaths")
                        .HasColumnName("HSDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("Hskills")
                        .HasColumnName("HSKills")
                        .HasColumnType("smallint");

                    b.Property<short>("Hsvictim")
                        .HasColumnName("HSVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("Kills")
                        .HasColumnType("smallint");

                    b.Property<int>("MoneyEarned")
                        .HasColumnType("int");

                    b.Property<int>("MoneyLost")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<short>("Mvps")
                        .HasColumnName("MVPs")
                        .HasColumnType("smallint");

                    b.Property<byte>("RankAfterMatch")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("RankBeforeMatch")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("RealAssists")
                        .HasColumnType("smallint");

                    b.Property<short>("RealDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("RealKills")
                        .HasColumnType("smallint");

                    b.Property<short>("RealMvps")
                        .HasColumnName("RealMVPs")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore")
                        .HasColumnType("smallint");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<short>("SelfFlashed")
                        .HasColumnType("smallint");

                    b.Property<short>("Shots")
                        .HasColumnType("smallint");

                    b.Property<short>("SmokesUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Suicides")
                        .HasColumnType("smallint");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("TeamDamage")
                        .HasColumnType("int");

                    b.Property<short>("TeamFlashVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("TeamFlashed")
                        .HasColumnType("smallint");

                    b.Property<int>("TeamKills")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "SteamId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_PlayerMatchStats_MatchStats");

                    b.HasIndex("SteamId")
                        .HasName("IX_FK_PlayerMatchStats_PlayerStats");

                    b.ToTable("PlayerMatchStats");
                });

            modelBuilder.Entity("Entities.PlayerPosition", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_PlayerPosition_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_PlayerPosition_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_PlayerPosition_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_PlayerPosition_PlayerRoundStats");

                    b.ToTable("PlayerPosition");
                });

            modelBuilder.Entity("Entities.PlayerRoundStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("ArmorType")
                        .HasColumnType("smallint");

                    b.Property<int>("GiftedValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MoneyEarned")
                        .HasColumnType("int");

                    b.Property<int>("MoneyInitial")
                        .HasColumnType("int");

                    b.Property<int>("MoneyLost")
                        .HasColumnType("int");

                    b.Property<int>("MoneySaved")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.Property<int>("PlayedEquipmentValue")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedGiftValue")
                        .HasColumnType("int");

                    b.Property<short>("RoundStartAssists")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartDamage")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartKills")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartMvps")
                        .HasColumnName("RoundStartMVPs")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartScore")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "Round", "PlayerId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_PlayerRoundStats_MatchStats");

                    b.HasIndex("PlayerId")
                        .HasName("IX_FK_PlayerRoundStats_PlayerStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_PlayerRoundStats_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_PlayerRoundStats_RoundStats");

                    b.ToTable("PlayerRoundStats");
                });

            modelBuilder.Entity("Entities.PlayerStats", b =>
                {
                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<long>("Assists")
                        .HasColumnType("bigint");

                    b.Property<string>("AvatarIcon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<double>("AvgtimeAlive")
                        .HasColumnName("AVGTimeAlive")
                        .HasColumnType("double");

                    b.Property<bool>("Banned")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BlameCounter")
                        .HasColumnType("int");

                    b.Property<long>("BombDefuses")
                        .HasColumnType("bigint");

                    b.Property<long>("BombExplosions")
                        .HasColumnType("bigint");

                    b.Property<long>("BombPlants")
                        .HasColumnType("bigint");

                    b.Property<long>("BombVictim")
                        .HasColumnType("bigint");

                    b.Property<long>("Damage")
                        .HasColumnType("bigint");

                    b.Property<int>("DamageVictim")
                        .HasColumnType("int");

                    b.Property<long>("Deaths")
                        .HasColumnType("bigint");

                    b.Property<long>("DecoysUsed")
                        .HasColumnType("bigint");

                    b.Property<long>("Enemy2K")
                        .HasColumnType("bigint");

                    b.Property<long>("Enemy3K")
                        .HasColumnType("bigint");

                    b.Property<long>("Enemy4K")
                        .HasColumnType("bigint");

                    b.Property<long>("Enemy5K")
                        .HasColumnType("bigint");

                    b.Property<long>("EntryKillVictim")
                        .HasColumnType("bigint");

                    b.Property<long>("EntryKills")
                        .HasColumnType("bigint");

                    b.Property<long>("FireNadesDamage")
                        .HasColumnType("bigint");

                    b.Property<long>("FireNadesDamageVictim")
                        .HasColumnType("bigint");

                    b.Property<long>("FireNadesUsed")
                        .HasColumnType("bigint");

                    b.Property<long>("FirstBloodVictim")
                        .HasColumnType("bigint");

                    b.Property<long>("FirstBloods")
                        .HasColumnType("bigint");

                    b.Property<long>("FlashVictim")
                        .HasColumnType("bigint");

                    b.Property<long>("FlashesSucceeded")
                        .HasColumnType("bigint");

                    b.Property<long>("FlashesUsed")
                        .HasColumnType("bigint");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("GamesWon")
                        .HasColumnType("int");

                    b.Property<long>("HesDamage")
                        .HasColumnName("HEsDamage")
                        .HasColumnType("bigint");

                    b.Property<long>("HesDamageVictim")
                        .HasColumnName("HEsDamageVictim")
                        .HasColumnType("bigint");

                    b.Property<long>("HesUsed")
                        .HasColumnName("HEsUsed")
                        .HasColumnType("bigint");

                    b.Property<long>("Hits")
                        .HasColumnType("bigint");

                    b.Property<double>("Hltvrating1")
                        .HasColumnName("HLTVRating1")
                        .HasColumnType("double");

                    b.Property<double>("Hltvrating2")
                        .HasColumnName("HLTVRating2")
                        .HasColumnType("double");

                    b.Property<long>("Hs")
                        .HasColumnName("HS")
                        .HasColumnType("bigint");

                    b.Property<long>("Hsdeaths")
                        .HasColumnName("HSDeaths")
                        .HasColumnType("bigint");

                    b.Property<long>("Hskills")
                        .HasColumnName("HSKills")
                        .HasColumnType("bigint");

                    b.Property<long>("Hsvictim")
                        .HasColumnName("HSVictim")
                        .HasColumnType("bigint");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<int>("LastGameBan")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastRankUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('1900-01-01 00:00:00')");

                    b.Property<int>("LastVacBan")
                        .HasColumnType("int");

                    b.Property<long>("MoneyEarned")
                        .HasColumnType("bigint");

                    b.Property<long>("MoneyLost")
                        .HasColumnType("bigint");

                    b.Property<long>("MoneySpent")
                        .HasColumnType("bigint");

                    b.Property<long>("Mvps")
                        .HasColumnName("MVPs")
                        .HasColumnType("bigint");

                    b.Property<int>("NumOfGameBans")
                        .HasColumnType("int");

                    b.Property<int>("NumOfVacbans")
                        .HasColumnName("NumOfVACBans")
                        .HasColumnType("int");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.Property<long>("SelfFlashed")
                        .HasColumnType("bigint");

                    b.Property<long>("Shots")
                        .HasColumnType("bigint");

                    b.Property<long>("SmokesUsed")
                        .HasColumnType("bigint");

                    b.Property<string>("SteamName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<long>("Suicides")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamDamage")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamFlashVictim")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamFlashed")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamKills")
                        .HasColumnType("bigint");

                    b.HasKey("SteamId");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("Entities.PolygonPoint", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Xingame")
                        .HasColumnName("XIngame")
                        .HasColumnType("double");

                    b.Property<int>("Xpixel")
                        .HasColumnName("XPixel")
                        .HasColumnType("int");

                    b.Property<double>("Yingame")
                        .HasColumnName("YIngame")
                        .HasColumnType("double");

                    b.Property<int>("Ypixel")
                        .HasColumnName("YPixel")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "PointId");

                    b.ToTable("_PolygonPoint");
                });

            modelBuilder.Entity("Entities.PositionOpposingZones", b =>
                {
                    b.Property<int>("TzoneId")
                        .HasColumnName("TZoneId")
                        .HasColumnType("int");

                    b.Property<int>("CtZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TzoneId", "CtZoneId");

                    b.ToTable("_PositionOpposingZones");
                });

            modelBuilder.Entity("Entities.PositionPolygonPoint", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Xingame")
                        .HasColumnName("XIngame")
                        .HasColumnType("double");

                    b.Property<int>("Xpixel")
                        .HasColumnName("XPixel")
                        .HasColumnType("int");

                    b.Property<double>("Yingame")
                        .HasColumnName("YIngame")
                        .HasColumnType("double");

                    b.Property<int>("Ypixel")
                        .HasColumnName("YPixel")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "PointId");

                    b.HasIndex("ZoneId")
                        .HasName("IX_FK__PositionPolygonPoint__PositionZone");

                    b.ToTable("_PositionPolygonPoint");
                });

            modelBuilder.Entity("Entities.PositionZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<double>("CenterXingame")
                        .HasColumnName("CenterXIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterXpixel")
                        .HasColumnName("CenterXPixel")
                        .HasColumnType("int");

                    b.Property<double>("CenterYingame")
                        .HasColumnName("CenterYIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterYpixel")
                        .HasColumnName("CenterYPixel")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ParentZoneId")
                        .HasColumnType("int");

                    b.Property<short>("Team")
                        .HasColumnType("smallint");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double?>("Zmax")
                        .HasColumnName("ZMax")
                        .HasColumnType("double");

                    b.Property<double?>("Zmin")
                        .HasColumnName("ZMin")
                        .HasColumnType("double");

                    b.Property<int>("ZoneDepth")
                        .HasColumnType("int");

                    b.HasKey("ZoneId");

                    b.ToTable("_PositionZone");
                });

            modelBuilder.Entity("Entities.Refrag", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("KillId")
                        .HasColumnType("bigint");

                    b.Property<long>("RefraggedKillId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "KillId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK__Refrag_MatchStats");

                    b.HasIndex("MatchId", "KillId")
                        .HasName("IX_FK__Refrag_Kill");

                    b.HasIndex("MatchId", "RefraggedKillId")
                        .HasName("IX_FK__Refrag_Kill_Refragged");

                    b.ToTable("_Refrag");
                });

            modelBuilder.Entity("Entities.RoundItem", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundItemId")
                        .HasColumnType("bigint");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "RoundItemId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_RoundItem_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_RoundItem_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_RoundItem_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_RoundItem_PlayerRoundStats");

                    b.ToTable("RoundItem");
                });

            modelBuilder.Entity("Entities.RoundStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("BombPlanted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CtBuyStrat")
                        .HasColumnName("_CtBuyStrat")
                        .HasColumnType("int");

                    b.Property<int>("CtPlayedValue")
                        .HasColumnType("int");

                    b.Property<int>("CtStrategyId")
                        .HasColumnType("int");

                    b.Property<int>("EndTick")
                        .HasColumnType("int");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<bool>("OriginalSide")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RealEndTick")
                        .HasColumnType("int");

                    b.Property<int>("RealEndTime")
                        .HasColumnType("int");

                    b.Property<int>("RoundTime")
                        .HasColumnType("int");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<int>("TbuyStrat")
                        .HasColumnName("_TBuyStrat")
                        .HasColumnType("int");

                    b.Property<int>("TerrorStrategyId")
                        .HasColumnType("int");

                    b.Property<int>("TplayedValue")
                        .HasColumnName("TPlayedValue")
                        .HasColumnType("int");

                    b.Property<byte?>("WinType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("WinnerTeam")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_RoundStats_MatchStats");

                    b.ToTable("RoundStats");
                });

            modelBuilder.Entity("Entities.SinglePath", b =>
                {
                    b.Property<long>("PathId")
                        .HasColumnType("bigint");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SuperOrdinateId")
                        .HasColumnType("bigint");

                    b.HasKey("PathId");

                    b.ToTable("_SinglePath");
                });

            modelBuilder.Entity("Entities.Smoke", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("Category")
                        .HasColumnName("_Category")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<byte>("Result")
                        .HasColumnName("_Result")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Target")
                        .HasColumnName("_Target")
                        .HasColumnType("int");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_Smoke_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_Smoke_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_Smoke_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_Smoke_PlayerRoundStats");

                    b.ToTable("Smoke");
                });

            modelBuilder.Entity("Entities.SmokeCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosX")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosY")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosZ")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlayerPosX")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosXmax")
                        .HasColumnName("PlayerPosXMax")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosXmin")
                        .HasColumnName("PlayerPosXMin")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosXpixel")
                        .HasColumnName("PlayerPosXPixel")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosY")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosYmax")
                        .HasColumnName("PlayerPosYMax")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosYmin")
                        .HasColumnName("PlayerPosYMin")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosYpixel")
                        .HasColumnName("PlayerPosYPixel")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosZ")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosZmax")
                        .HasColumnName("PlayerPosZMax")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosZmin")
                        .HasColumnName("PlayerPosZMin")
                        .HasColumnType("int");

                    b.Property<int>("PlayerViewX")
                        .HasColumnType("int");

                    b.Property<int>("PlayerViewXmax")
                        .HasColumnName("PlayerViewXMax")
                        .HasColumnType("int");

                    b.Property<int>("PlayerViewXmin")
                        .HasColumnName("PlayerViewXMin")
                        .HasColumnType("int");

                    b.Property<int>("PlayerViewY")
                        .HasColumnType("int");

                    b.Property<int>("PlayerViewYmax")
                        .HasColumnName("PlayerViewYMax")
                        .HasColumnType("int");

                    b.Property<int>("PlayerViewYmin")
                        .HasColumnName("PlayerViewYMin")
                        .HasColumnType("int");

                    b.Property<string>("Setpos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<byte>("ThrowType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("ViewXcontainsPole")
                        .HasColumnName("ViewXContainsPole")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CategoryId");

                    b.HasIndex("TargetId")
                        .HasName("IX_FK__SmokeCategory__SmokeTarget");

                    b.ToTable("_SmokeCategory");
                });

            modelBuilder.Entity("Entities.SmokeTarget", b =>
                {
                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosX")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosXmax")
                        .HasColumnName("GrenadePosXMax")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosXmin")
                        .HasColumnName("GrenadePosXMin")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosXpixel")
                        .HasColumnName("GrenadePosXPixel")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosY")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosYmax")
                        .HasColumnName("GrenadePosYMax")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosYmin")
                        .HasColumnName("GrenadePosYMin")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosYpixel")
                        .HasColumnName("GrenadePosYPixel")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosZ")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosZmax")
                        .HasColumnName("GrenadePosZMax")
                        .HasColumnType("int");

                    b.Property<int>("GrenadePosZmin")
                        .HasColumnName("GrenadePosZMin")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TargetId");

                    b.ToTable("_SmokeTarget");
                });

            modelBuilder.Entity("Entities.StutterStep", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("StutterStepId")
                        .HasColumnType("bigint");

                    b.Property<short>("Lag")
                        .HasColumnType("smallint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("StutterStartTime")
                        .HasColumnType("int");

                    b.Property<int>("Under34Time")
                        .HasColumnType("int");

                    b.Property<long>("WeaponFiredId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "PlayerId", "StutterStepId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK__StutterStep_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK__StutterStep_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK__StutterStep_RoundStats");

                    b.HasIndex("MatchId", "WeaponFiredId")
                        .HasName("IX_FK__StutterStep_WeaponFired");

                    b.ToTable("_StutterStep");
                });

            modelBuilder.Entity("Entities.TeamStrategy", b =>
                {
                    b.Property<long>("StrategyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SuperOrdinateId")
                        .HasColumnType("bigint");

                    b.HasKey("StrategyId");

                    b.ToTable("_TeamStrategy");
                });

            modelBuilder.Entity("Entities.WeaponFired", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeaponFiredId")
                        .HasColumnType("bigint");

                    b.Property<double>("InAccuracyFromFiring")
                        .HasColumnType("double");

                    b.Property<double>("InAccuracyFromMoving")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<short>("PlayerState")
                        .HasColumnType("smallint");

                    b.Property<double>("PlayerVeloX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "WeaponFiredId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_WeaponFired_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_WeaponFired_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_WeaponFired_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_WeaponFired_PlayerRoundStats");

                    b.ToTable("WeaponFired");
                });

            modelBuilder.Entity("Entities.WeaponReload", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeaponReloadId")
                        .HasColumnType("bigint");

                    b.Property<short>("AmmoAfter")
                        .HasColumnType("smallint");

                    b.Property<short>("AmmoBefore")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnName("IsCT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("ReserveAmmo")
                        .HasColumnType("smallint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "WeaponReloadId");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_WeaponReload_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_WeaponReload_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_WeaponReload_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_WeaponReload_PlayerRoundStats");

                    b.ToTable("WeaponReload");
                });

            modelBuilder.Entity("Entities.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<double>("CenterXingame")
                        .HasColumnName("CenterXIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterXpixel")
                        .HasColumnName("CenterXPixel")
                        .HasColumnType("int");

                    b.Property<double>("CenterYingame")
                        .HasColumnName("CenterYIngame")
                        .HasColumnType("double");

                    b.Property<int>("CenterYpixel")
                        .HasColumnName("CenterYPixel")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double?>("Zmax")
                        .HasColumnName("ZMax")
                        .HasColumnType("double");

                    b.Property<double?>("Zmin")
                        .HasColumnName("ZMin")
                        .HasColumnType("double");

                    b.HasKey("ZoneId");

                    b.ToTable("_Zone");
                });

            modelBuilder.Entity("Entities.BombDefused", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_BombExplosion_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_BombDefused_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithOne("BombDefused")
                        .HasForeignKey("Entities.BombDefused", "MatchId", "Round")
                        .HasConstraintName("FK_BombDefused_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_BombDefused_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.BombExplosion", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("BombExplosion")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_BombExplosion_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithOne("BombExplosion")
                        .HasForeignKey("Entities.BombExplosion", "MatchId", "Round")
                        .HasConstraintName("FK_BombExplosion_RoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.BombPlant", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_BombPlant_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_BombPlant_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithOne("BombPlant")
                        .HasForeignKey("Entities.BombPlant", "MatchId", "Round")
                        .HasConstraintName("FK_BombPlant_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_BombPlant_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.BombPolygonPoint", b =>
                {
                    b.HasOne("Entities.BombZone", "Zone")
                        .WithMany("BombPolygonPoint")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK__BombPolygonPoint__BombZone")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.BotTakeOver", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_BotTakeOver_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_BotTakeOver_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_BotTakeOver_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_BotTakeOver_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ConnectDisconnect", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_ConnectDisconnect_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_ConnectDisconnect_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_ConnectDisconnect_RoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Damage", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Damage_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Decoy", "Decoy")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "DecoyId")
                        .HasConstraintName("FK_Damage_Decoy");

                    b.HasOne("Entities.FireNade", "FireNade")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "FireNadeId")
                        .HasConstraintName("FK_Damage_FireNade");

                    b.HasOne("Entities.He", "He")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "HegrenadeId")
                        .HasConstraintName("FK_Damage_HE");

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("DamagePlayerMatchStats")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Damage_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Damage_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStatsNavigation")
                        .WithMany("DamagePlayerMatchStatsNavigation")
                        .HasForeignKey("MatchId", "VictimId")
                        .HasConstraintName("FK_Damage_PlayerMatchStats_Victim")
                        .IsRequired();

                    b.HasOne("Entities.WeaponFired", "WeaponFired")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "WeaponFiredId")
                        .HasConstraintName("FK_Damage_WeaponFired");

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("DamagePlayerRoundStats")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Damage_PlayerRoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStatsNavigation")
                        .WithMany("DamagePlayerRoundStatsNavigation")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .HasConstraintName("FK_Damage_PlayerRoundStats_Victim")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Decoy", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Decoy_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Decoy_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Decoy_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Decoy_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.FireNade", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_FireNade_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_FireNade_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_FireNade_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_FireNade_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.FireNadePolygonPoint", b =>
                {
                    b.HasOne("Entities.FireNadeZone", "Zone")
                        .WithMany("FireNadePolygonPoint")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK__FireNadePolygonPoint__FireNadeZone")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Flash", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Flash_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Flash_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Flash_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Flash_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.FlashPolygonPoint", b =>
                {
                    b.HasOne("Entities.FlashZone", "Zone")
                        .WithMany("FlashPolygonPoint")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK__FlashPolygonPoint__FlashZone")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Flashed", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Flashed_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Kills", "Kills")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "AssistedKillId")
                        .HasConstraintName("FK_Flashed_Kills");

                    b.HasOne("Entities.Flash", "Flash")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "GrenadeId")
                        .HasConstraintName("FK_Flashed_Flash")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Flashed_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "VictimId")
                        .HasConstraintName("FK_Flashed_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .HasConstraintName("FK_Flashed_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.He", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("He")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_HE_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_HE_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HE_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_HE_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.HepolygonPoint", b =>
                {
                    b.HasOne("Entities.Hezone", "Zone")
                        .WithMany("HepolygonPoint")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK__HEPolygonPoint__HEZone")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.HostageDrop", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_HostageDrop_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_HostageDrop_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HostageDrop_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_HostageDrop_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.HostagePickUp", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_HostagePickUp_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_HostagePickUp_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HostagePickUp_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_HostagePickUp_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.HostageRescue", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_HostageRescue_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_HostageRescue_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HostageRescue_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_HostageRescue_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ItemDropped", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_ItemDropped_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_ItemDropped_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_ItemDropped_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_ItemDropped_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ItemPickedUp", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_ItemPickedUp_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ItemDropped", "ItemDropped")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "ItemDroppedId")
                        .HasConstraintName("FK_ItemPickedUp_ItemDropped");

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_ItemPickedUp_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_ItemPickedUp_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_ItemPickedUp_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ItemSaved", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_ItemSaved_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_ItemSaved_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_ItemSaved_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_ItemSaved_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Kills", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Kills_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Damage", "Damage")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "DamageId")
                        .HasConstraintName("FK_Kills_Damage");

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("KillsPlayerMatchStats")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Kills_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Kills_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStatsNavigation")
                        .WithMany("KillsPlayerMatchStatsNavigation")
                        .HasForeignKey("MatchId", "VictimId")
                        .HasConstraintName("FK_Kills_PlayerMatchStats_Victim")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("KillsPlayerRoundStats")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Kills_PlayerRoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStatsNavigation")
                        .WithMany("KillsPlayerRoundStatsNavigation")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .HasConstraintName("FK_Kills_PlayerRoundStats_Victim")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.MatchStats", b =>
                {
                    b.HasOne("Entities.DemoStats", "Demo")
                        .WithMany("MatchStats")
                        .HasForeignKey("DemoId")
                        .HasConstraintName("FK_MatchStats_DemoStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.OverTimeStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithOne("OverTimeStats")
                        .HasForeignKey("Entities.OverTimeStats", "MatchId")
                        .HasConstraintName("FK_OverTimeStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.PlayerMatchSmokeStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("PlayerMatchSmokeStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK__PlayerMatchSmokeStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("PlayerMatchSmokeStats")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK__PlayerMatchSmokeStats_PlayerMatchStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.PlayerMatchStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_PlayerMatchStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerStats", "Steam")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("SteamId")
                        .HasConstraintName("FK_PlayerMatchStats_PlayerStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.PlayerPosition", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_PlayerPosition_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_PlayerPosition_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_PlayerPosition_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_PlayerPosition_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.PlayerRoundStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_PlayerRoundStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerStats", "Player")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_PlayerRoundStats_PlayerStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_PlayerRoundStats_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_PlayerRoundStats_RoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.PositionPolygonPoint", b =>
                {
                    b.HasOne("Entities.PositionZone", "Zone")
                        .WithMany("PositionPolygonPoint")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK__PositionPolygonPoint__PositionZone")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Refrag", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Refrag")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK__Refrag_MatchStats")
                        .IsRequired();

                    b.HasOne("Entities.Kills", "Kills")
                        .WithOne("RefragKills")
                        .HasForeignKey("Entities.Refrag", "MatchId", "KillId")
                        .HasConstraintName("FK__Refrag_Kill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Kills", "KillsNavigation")
                        .WithMany("RefragKillsNavigation")
                        .HasForeignKey("MatchId", "RefraggedKillId")
                        .HasConstraintName("FK__Refrag_Kill_Refragged")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.RoundItem", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_RoundItem_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_RoundItem_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_RoundItem_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_RoundItem_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.RoundStats", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("RoundStats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_RoundStats_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Smoke", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Smoke_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_Smoke_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_Smoke_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_Smoke_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.SmokeCategory", b =>
                {
                    b.HasOne("Entities.SmokeTarget", "Target")
                        .WithMany("SmokeCategory")
                        .HasForeignKey("TargetId")
                        .HasConstraintName("FK__SmokeCategory__SmokeTarget")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.StutterStep", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("StutterStep")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK__StutterStep_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("StutterStep")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK__StutterStep_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("StutterStep")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK__StutterStep_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.WeaponFired", "WeaponFired")
                        .WithMany("StutterStep")
                        .HasForeignKey("MatchId", "WeaponFiredId")
                        .HasConstraintName("FK__StutterStep_WeaponFired")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.WeaponFired", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_WeaponFired_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_WeaponFired_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_WeaponFired_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_WeaponFired_PlayerRoundStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.WeaponReload", b =>
                {
                    b.HasOne("Entities.MatchStats", "Match")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_WeaponReload_MatchStats")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "PlayerId")
                        .HasConstraintName("FK_WeaponReload_PlayerMatchStats")
                        .IsRequired();

                    b.HasOne("Entities.RoundStats", "RoundStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_WeaponReload_RoundStats")
                        .IsRequired();

                    b.HasOne("Entities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .HasConstraintName("FK_WeaponReload_PlayerRoundStats")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
