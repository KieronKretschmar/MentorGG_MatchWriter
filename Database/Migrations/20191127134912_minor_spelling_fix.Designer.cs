// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(MatchContext))]
    [Migration("20191127134912_minor_spelling_fix")]
    partial class minor_spelling_fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MatchEntities.BombDefused", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("BombTimeLeft")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique();

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("BombDefused");
                });

            modelBuilder.Entity("MatchEntities.BombExplosion", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique();

                    b.ToTable("BombExplosion");
                });

            modelBuilder.Entity("MatchEntities.BombPlant", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("PlantZone")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<byte>("Site")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round")
                        .IsUnique();

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("BombPlant");
                });

            modelBuilder.Entity("MatchEntities.BotTakeOver", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("BotTakeOverId")
                        .HasColumnType("bigint");

                    b.Property<long>("BotId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "BotTakeOverId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("BotTakeOver");
                });

            modelBuilder.Entity("MatchEntities.ConnectDisconnect", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConnectDisconnectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Connect")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ConnectDisconnectId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.ToTable("ConnectDisconnect");
                });

            modelBuilder.Entity("MatchEntities.Damage", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageId")
                        .HasColumnType("bigint");

                    b.Property<int>("AmountArmor")
                        .HasColumnType("int");

                    b.Property<int>("AmountHealth")
                        .HasColumnType("int");

                    b.Property<int>("AmountHealthPotential")
                        .HasColumnType("int");

                    b.Property<long?>("DecoyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Fatal")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("FireNadeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HeGrenadeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("HitGroup")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<int?>("PlayerZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamAttack")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<int?>("VictimZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.Property<long?>("WeaponFiredId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "DamageId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "DecoyId");

                    b.HasIndex("MatchId", "FireNadeId");

                    b.HasIndex("MatchId", "HeGrenadeId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "VictimId");

                    b.HasIndex("MatchId", "WeaponFiredId");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.HasIndex("MatchId", "Round", "VictimId");

                    b.ToTable("Damage");
                });

            modelBuilder.Entity("MatchEntities.Decoy", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("Decoy");
                });

            modelBuilder.Entity("MatchEntities.FireNade", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMolotov")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("NadeType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("FireNade");
                });

            modelBuilder.Entity("MatchEntities.Flash", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("Flash");
                });

            modelBuilder.Entity("MatchEntities.Flashed", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<int>("AngleToCrosshair")
                        .HasColumnType("int");

                    b.Property<long?>("AssistedKillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamAttack")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TimeFlashed")
                        .HasColumnType("int");

                    b.Property<int?>("TimeUntilAssistedKill")
                        .HasColumnType("int");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<double>("VictimViewX")
                        .HasColumnType("double");

                    b.Property<double>("VictimViewY")
                        .HasColumnType("double");

                    b.HasKey("MatchId", "GrenadeId", "VictimId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "AssistedKillId")
                        .IsUnique();

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "VictimId");

                    b.HasIndex("MatchId", "Round", "VictimId");

                    b.ToTable("Flashed");
                });

            modelBuilder.Entity("MatchEntities.He", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DetonationZoneByTeam")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("He");
                });

            modelBuilder.Entity("MatchEntities.HostageDrop", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("HostageDrop");
                });

            modelBuilder.Entity("MatchEntities.HostagePickUp", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("HostagePickUp");
                });

            modelBuilder.Entity("MatchEntities.HostageRescue", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PosX")
                        .HasColumnType("double");

                    b.Property<double>("PosY")
                        .HasColumnType("double");

                    b.Property<double>("PosZ")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("HostageRescue");
                });

            modelBuilder.Entity("MatchEntities.ItemDropped", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemDroppedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ByDeath")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("Gift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ItemDroppedId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("ItemDropped");
                });

            modelBuilder.Entity("MatchEntities.ItemPickedUp", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemPickedUpId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Buy")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("Gift")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ItemDroppedId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "ItemPickedUpId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "ItemDroppedId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("ItemPickedUp");
                });

            modelBuilder.Entity("MatchEntities.ItemSaved", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemSavedId")
                        .HasColumnType("bigint");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "ItemSavedId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("ItemSaved");
                });

            modelBuilder.Entity("MatchEntities.Kill", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("KillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AssistByFlash")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("AssisterId")
                        .HasColumnType("bigint");

                    b.Property<double?>("AssisterPosX")
                        .HasColumnType("double");

                    b.Property<double?>("AssisterPosY")
                        .HasColumnType("double");

                    b.Property<double?>("AssisterPosZ")
                        .HasColumnType("double");

                    b.Property<long?>("DamageId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("KillType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<short>("PlayerPrimary")
                        .HasColumnType("smallint");

                    b.Property<short>("PlayerSecondary")
                        .HasColumnType("smallint");

                    b.Property<int?>("PlayerZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("TeamKill")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<double>("VictimPosX")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosY")
                        .HasColumnType("double");

                    b.Property<double>("VictimPosZ")
                        .HasColumnType("double");

                    b.Property<short>("VictimPrimary")
                        .HasColumnType("smallint");

                    b.Property<short>("VictimSecondary")
                        .HasColumnType("smallint");

                    b.Property<int?>("VictimZoneByTeam")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "KillId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "DamageId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "VictimId");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.HasIndex("MatchId", "Round", "VictimId");

                    b.ToTable("Kills");
                });

            modelBuilder.Entity("MatchEntities.MatchStats", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double?>("AvgRank")
                        .HasColumnType("double");

                    b.Property<int?>("AvgRoundTime")
                        .HasColumnType("int");

                    b.Property<short>("BombDefuses1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombDefuses2")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplodes1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplodes2")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants2")
                        .HasColumnType("smallint");

                    b.Property<int>("BombTimer")
                        .HasColumnType("int");

                    b.Property<long>("DemoId")
                        .HasColumnType("bigint");

                    b.Property<short>("DemoTickRate")
                        .HasColumnType("smallint");

                    b.Property<string>("Event")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte>("GameType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MoneyEarned1")
                        .HasColumnType("int");

                    b.Property<int>("MoneyEarned2")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent1")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent2")
                        .HasColumnType("int");

                    b.Property<short>("NumRoundsCt1")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsCt2")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsT1")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsT2")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore1")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore2")
                        .HasColumnType("smallint");

                    b.Property<int>("RoundTimer")
                        .HasColumnType("int");

                    b.Property<short>("Score1")
                        .HasColumnType("smallint");

                    b.Property<short>("Score2")
                        .HasColumnType("smallint");

                    b.Property<string>("Source")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short>("SourceTickRate")
                        .HasColumnType("smallint");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.Property<byte>("WinnerTeam")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId");

                    b.HasIndex("DemoId");

                    b.ToTable("MatchStats");
                });

            modelBuilder.Entity("MatchEntities.OverTimeStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("NumRounds")
                        .HasColumnType("smallint");

                    b.Property<byte>("StartCt")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.Property<byte>("StartT")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("OverTimeStats");
                });

            modelBuilder.Entity("MatchEntities.PlayerMatchStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<short>("AssistCount")
                        .HasColumnType("smallint");

                    b.Property<double>("AvgTimeAlive")
                        .HasColumnType("double");

                    b.Property<short>("BombDefuses")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplosions")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants")
                        .HasColumnType("smallint");

                    b.Property<short>("BombVictim")
                        .HasColumnType("smallint");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("DamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("DeathCount")
                        .HasColumnType("smallint");

                    b.Property<short>("DecoysUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy2K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy3K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy4K")
                        .HasColumnType("smallint");

                    b.Property<short>("Enemy5K")
                        .HasColumnType("smallint");

                    b.Property<int>("EntryKillVictim")
                        .HasColumnType("int");

                    b.Property<int>("EntryKills")
                        .HasColumnType("int");

                    b.Property<int>("FireNadesDamage")
                        .HasColumnType("int");

                    b.Property<int>("FireNadesDamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("FireNadesUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("FirstBloodVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("FirstBloods")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashesSucceeded")
                        .HasColumnType("smallint");

                    b.Property<short>("FlashesUsed")
                        .HasColumnType("smallint");

                    b.Property<int>("HesDamage")
                        .HasColumnType("int");

                    b.Property<int>("HesDamageVictim")
                        .HasColumnType("int");

                    b.Property<short>("HesUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Hits")
                        .HasColumnType("smallint");

                    b.Property<double>("HltvRating1")
                        .HasColumnType("double");

                    b.Property<double>("HltvRating2")
                        .HasColumnType("double");

                    b.Property<short>("Hs")
                        .HasColumnType("smallint");

                    b.Property<short>("HsDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("HsKills")
                        .HasColumnType("smallint");

                    b.Property<short>("HsVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("KillCount")
                        .HasColumnType("smallint");

                    b.Property<int>("MoneyEarned")
                        .HasColumnType("int");

                    b.Property<int>("MoneyLost")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<short>("Mvps")
                        .HasColumnType("smallint");

                    b.Property<byte>("RankAfterMatch")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("RankBeforeMatch")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("RealAssists")
                        .HasColumnType("smallint");

                    b.Property<short>("RealDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("RealKills")
                        .HasColumnType("smallint");

                    b.Property<short>("RealMvps")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore")
                        .HasColumnType("smallint");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<short>("SelfFlashed")
                        .HasColumnType("smallint");

                    b.Property<short>("Shots")
                        .HasColumnType("smallint");

                    b.Property<short>("SmokesUsed")
                        .HasColumnType("smallint");

                    b.Property<short>("Suicides")
                        .HasColumnType("smallint");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("TeamDamage")
                        .HasColumnType("int");

                    b.Property<short>("TeamFlashVictim")
                        .HasColumnType("smallint");

                    b.Property<short>("TeamFlashed")
                        .HasColumnType("smallint");

                    b.Property<int>("TeamKills")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "SteamId");

                    b.HasIndex("MatchId");

                    b.HasIndex("SteamId");

                    b.ToTable("PlayerMatchStats");
                });

            modelBuilder.Entity("MatchEntities.PlayerPosition", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "Round", "PlayerId", "Time");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.ToTable("PlayerPosition");
                });

            modelBuilder.Entity("MatchEntities.PlayerRoundStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("ArmorType")
                        .HasColumnType("smallint");

                    b.Property<int>("GiftedValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MoneyEarned")
                        .HasColumnType("int");

                    b.Property<int>("MoneyInitial")
                        .HasColumnType("int");

                    b.Property<int>("MoneyLost")
                        .HasColumnType("int");

                    b.Property<int>("MoneySaved")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.Property<int>("PlayedEquipmentValue")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedGiftValue")
                        .HasColumnType("int");

                    b.Property<short>("RoundStartAssists")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartDamage")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartDeaths")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartKills")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartMvps")
                        .HasColumnType("smallint");

                    b.Property<short>("RoundStartScore")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "Round", "PlayerId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.ToTable("PlayerRoundStats");
                });

            modelBuilder.Entity("MatchEntities.Refrag", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("KillId")
                        .HasColumnType("bigint");

                    b.Property<long>("RefraggedKillId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "KillId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "KillId");

                    b.HasIndex("MatchId", "RefraggedKillId");

                    b.ToTable("Refrag");
                });

            modelBuilder.Entity("MatchEntities.RoundItem", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundItemId")
                        .HasColumnType("bigint");

                    b.Property<short>("Equipment")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "RoundItemId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("RoundItem");
                });

            modelBuilder.Entity("MatchEntities.RoundStats", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<bool>("BombPlanted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CtBuyStrat")
                        .HasColumnType("int");

                    b.Property<int>("CtPlayedValue")
                        .HasColumnType("int");

                    b.Property<int>("CtStrategyId")
                        .HasColumnType("int");

                    b.Property<int>("EndTick")
                        .HasColumnType("int");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<bool>("OriginalSide")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RealEndTick")
                        .HasColumnType("int");

                    b.Property<int>("RealEndTime")
                        .HasColumnType("int");

                    b.Property<int>("RoundTime")
                        .HasColumnType("int");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<int>("TBuyStrat")
                        .HasColumnType("int");

                    b.Property<int>("TPlayedValue")
                        .HasColumnType("int");

                    b.Property<int>("TerrorStrategyId")
                        .HasColumnType("int");

                    b.Property<byte?>("WinType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("WinnerTeam")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId");

                    b.ToTable("RoundStats");
                });

            modelBuilder.Entity("MatchEntities.Smoke", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrenadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<double>("GrenadePosX")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosY")
                        .HasColumnType("double");

                    b.Property<double>("GrenadePosZ")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Trajectory")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MatchId", "GrenadeId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("Smoke");
                });

            modelBuilder.Entity("MatchEntities.WeaponFired", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeaponFiredId")
                        .HasColumnType("bigint");

                    b.Property<double>("InAccuracyFromFiring")
                        .HasColumnType("double");

                    b.Property<double>("InAccuracyFromMoving")
                        .HasColumnType("double");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<short>("PlayerState")
                        .HasColumnType("smallint");

                    b.Property<double>("PlayerVeloX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerVeloZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "WeaponFiredId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("WeaponFired");
                });

            modelBuilder.Entity("MatchEntities.WeaponReload", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeaponReloadId")
                        .HasColumnType("bigint");

                    b.Property<short>("AmmoAfter")
                        .HasColumnType("smallint");

                    b.Property<short>("AmmoBefore")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCt")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("PlayerPosX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosY")
                        .HasColumnType("double");

                    b.Property<double>("PlayerPosZ")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewX")
                        .HasColumnType("double");

                    b.Property<double>("PlayerViewY")
                        .HasColumnType("double");

                    b.Property<short>("ReserveAmmo")
                        .HasColumnType("smallint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<short>("Weapon")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "WeaponReloadId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId", "PlayerId");

                    b.HasIndex("MatchId", "Round");

                    b.HasIndex("MatchId", "Round", "PlayerId");

                    b.ToTable("WeaponReload");
                });

            modelBuilder.Entity("MatchEntities.BombDefused", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithOne("BombDefused")
                        .HasForeignKey("MatchEntities.BombDefused", "MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.BombExplosion", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("BombExplosion")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithOne("BombExplosion")
                        .HasForeignKey("MatchEntities.BombExplosion", "MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.BombPlant", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithOne("BombPlant")
                        .HasForeignKey("MatchEntities.BombPlant", "MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BombPlant")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.BotTakeOver", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("BotTakeOver")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.ConnectDisconnect", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("ConnectDisconnect")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.Damage", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.Decoy", "Decoy")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "DecoyId");

                    b.HasOne("MatchEntities.FireNade", "FireNade")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "FireNadeId");

                    b.HasOne("MatchEntities.He", "He")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "HeGrenadeId");

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Damages")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "VictimMatchStats")
                        .WithMany("DamagesReceived")
                        .HasForeignKey("MatchId", "VictimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.WeaponFired", "WeaponFired")
                        .WithMany("Damage")
                        .HasForeignKey("MatchId", "WeaponFiredId");

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Damages")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "VictimRoundStats")
                        .WithMany("DamagesReceived")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.Decoy", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Decoy")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.FireNade", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("FireNade")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.Flash", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Flash")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.Flashed", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.Kill", "AssistedKill")
                        .WithOne("AssistingFlash")
                        .HasForeignKey("MatchEntities.Flashed", "MatchId", "AssistedKillId");

                    b.HasOne("MatchEntities.Flash", "Flash")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "GrenadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "VictimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Flashed")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.He", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("He")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.HostageDrop", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostageDrop")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.HostagePickUp", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "Round")
                        .HasConstraintName("FK_HostagePickUp_RoundStats")
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostagePickUp")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.HostageRescue", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("HostageRescue")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.ItemDropped", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemDropped")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.ItemPickedUp", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.ItemDropped", "ItemDropped")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "ItemDroppedId");

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemPickedUp")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.ItemSaved", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("ItemSaved")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.Kill", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.Damage", "Damage")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "DamageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "VictimMatchStats")
                        .WithMany("Deaths")
                        .HasForeignKey("MatchId", "VictimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Kills")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "VictimRoundStats")
                        .WithMany("Deaths")
                        .HasForeignKey("MatchId", "Round", "VictimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.OverTimeStats", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithOne("OverTimeStats")
                        .HasForeignKey("MatchEntities.OverTimeStats", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.PlayerMatchStats", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.PlayerPosition", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("PlayerPosition")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.PlayerRoundStats", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.Refrag", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("Refrag")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.Kill", "Kill")
                        .WithOne("Refrag")
                        .HasForeignKey("MatchEntities.Refrag", "MatchId", "KillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.Kill", "RefraggedKill")
                        .WithMany("RefraggedBy")
                        .HasForeignKey("MatchId", "RefraggedKillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.RoundItem", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("RoundItem")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.RoundStats", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("RoundStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.Smoke", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("Smoke")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.WeaponFired", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("WeaponFired")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEntities.WeaponReload", b =>
                {
                    b.HasOne("MatchEntities.MatchStats", "MatchStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerMatchStats", "PlayerMatchStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.RoundStats", "RoundStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "Round")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchEntities.PlayerRoundStats", "PlayerRoundStats")
                        .WithMany("WeaponReload")
                        .HasForeignKey("MatchId", "Round", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
