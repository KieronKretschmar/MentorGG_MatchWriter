// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDatabase;

namespace TestDatabase.Migrations
{
    [DbContext(typeof(testContext))]
    [Migration("20191112170058_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TestEntities.BombDefused", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<short>("Round")
                        .HasColumnType("smallint");

                    b.Property<int>("BombTimeLeft")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "Round");

                    b.HasIndex("MatchId")
                        .HasName("IX_FK_BombDefused_MatchStats");

                    b.HasIndex("MatchId", "PlayerId")
                        .HasName("IX_FK_BombDefused_PlayerMatchStats");

                    b.HasIndex("MatchId", "Round")
                        .HasName("IX_FK_BombDefused_RoundStats");

                    b.HasIndex("MatchId", "Round", "PlayerId")
                        .HasName("IX_FK_BombDefused_PlayerRoundStats");

                    b.ToTable("BombDefused");
                });

            modelBuilder.Entity("TestEntities.MatchStats", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double?>("Avgrank")
                        .HasColumnName("AVGRank")
                        .HasColumnType("double");

                    b.Property<int?>("AvgroundTime")
                        .HasColumnName("AVGRoundTime")
                        .HasColumnType("int");

                    b.Property<short>("BombDefuses1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombDefuses2")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplodes1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombExplodes2")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants1")
                        .HasColumnType("smallint");

                    b.Property<short>("BombPlants2")
                        .HasColumnType("smallint");

                    b.Property<int>("BombTimer")
                        .HasColumnType("int");

                    b.Property<long>("DemoId")
                        .HasColumnType("bigint");

                    b.Property<short>("DemoTickRate")
                        .HasColumnType("smallint");

                    b.Property<string>("Event")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<byte>("GameType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Map")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MoneyEarned1")
                        .HasColumnType("int");

                    b.Property<int>("MoneyEarned2")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent1")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent2")
                        .HasColumnType("int");

                    b.Property<short>("NumRoundsCt1")
                        .HasColumnName("NumRoundsCT1")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsCt2")
                        .HasColumnName("NumRoundsCT2")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsT1")
                        .HasColumnType("smallint");

                    b.Property<short>("NumRoundsT2")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore1")
                        .HasColumnType("smallint");

                    b.Property<short>("RealScore2")
                        .HasColumnType("smallint");

                    b.Property<int>("RoundTimer")
                        .HasColumnType("int");

                    b.Property<short>("Score1")
                        .HasColumnType("smallint");

                    b.Property<short>("Score2")
                        .HasColumnType("smallint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("('')");

                    b.Property<short>("SourceTickRate")
                        .HasColumnType("smallint");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.Property<byte>("WinnerTeam")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MatchId");

                    b.HasIndex("DemoId")
                        .HasName("IX_FK_MatchStats_DemoStats");

                    b.ToTable("MatchStats");
                });

            modelBuilder.Entity("TestEntities.BombDefused", b =>
                {
                    b.HasOne("TestEntities.MatchStats", "Match")
                        .WithMany("BombDefused")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
